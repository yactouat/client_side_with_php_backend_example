{% extends 'layout.html.twig' %}

{% block content %}
    {% include "Item/_form.html.twig" %}
    <h1>Items</h1>
    {# we give our UL an id so we can select it easily with JS #}
    <ul id="items_list">
        {% for item in items %}
            <li><a href="/items/show?id={{ item.id }}">{{ item.id }}. {{ item.title }}</a></li>
        {% else %}
            <li>Nothing to display</li>
        {% endfor %}
    </ul>
{% endblock %}

{% block javascript %}
<script>
    // we wait that our HTML markup is fully loaded before interacting with the DOM
    document.addEventListener('DOMContentLoaded', () => {

        // we get the form element
        const addItemForm = document.getElementById('add_item_form');
        // we listen to its `submit` event
        addItemForm.addEventListener('submit', e => {
            // we prevent the page from reloading
            e.preventDefault();
            // we prepare the item payload to send to the backend as a string
            const itemPayload = {
                title: document.querySelector('#add_item_form input[name="title"]').value
            };
            // we send our item payload to the correct URL
            fetch('/items/add', {
                // we specify the request method
                method: 'POST',
                // we say to the server that we are sending JSON
                headers: {
                    'Content-Type': 'application/json',
                },
                // we set the body of our HTTP request to be the item payload
                body: JSON.stringify(itemPayload),
            })
                // on receiving the response from the server, we turn it into a readable json
                .then((response) => response.json())
                // ...then we do whatever we want with the response on the client side 
                .then((data) => {
                    // we create a `li` that will hold our newly retrieved item
                    const itemEl = document.createElement('li');
                    // we fill this list item with the correct link
                    itemEl.innerHTML = `<a href="/items/show?id=${data.id}">${data.id}. ${data.title}</a>`;
                    // we update the DOM
                    document.getElementById('items_list').appendChild(itemEl);
                })
                // ...OR we implement an error a behavior in case our HTTP call did not succeed or transforming the response into JSON failed
                .catch((error) => {
                    console.error('Error:', error);
                });
            });

    });
</script>
{% endblock %}